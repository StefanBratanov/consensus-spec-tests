name: Sync tests from new consensus-specs releases

permissions:
  contents: write

on:
  schedule:
    - cron: '0 * * * *'  # every hour
  workflow_dispatch:     # manual trigger

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_sync: ${{ steps.check.outputs.should_sync }}
      tag: ${{ steps.get_release.outputs.tag }}
    steps:
      - name: Get latest release info
        id: get_release
        run: |
          API="https://api.github.com/repos/ethereum/consensus-specs/releases"
          TAG=$(curl -s $API | jq -r '.[0].tag_name')
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Check if release already processed
        id: check
        run: |
          LAST_TAG=$(curl -s https://raw.githubusercontent.com/StefanBratanov/consensus-spec-tests/master/.last-release-tag || echo "")
          if [ "$LAST_TAG" = "${{ steps.get_release.outputs.tag }}" ]; then
            echo "No new release. Skipping sync."
            echo "should_sync=false" >> $GITHUB_OUTPUT
          else
            echo "New release detected."
            echo "should_sync=true" >> $GITHUB_OUTPUT
          fi

  sync-tests:
    needs: check-release
    if: needs.check-release.outputs.should_sync == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Download and extract tests
        run: |
          TAG="${{ needs.check-release.outputs.tag }}"
          # cleanup tests from previous release
          rm -rf tests/
          for name in general mainnet minimal; do
            curl -L "https://github.com/ethereum/consensus-specs/releases/download/$TAG/$name.tar.gz" -o "$name.tar.gz"
            tar -xzf "$name.tar.gz"
            rm "$name.tar.gz"
          done

      - name: Save new release tag
        run: echo "${{ needs.check-release.outputs.tag }}" > .last-release-tag

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git lfs install
          git add -A
          git commit -m "Add tests from release ${{ needs.check-release.outputs.tag }}"
          git push origin HEAD:${{ github.ref_name }}
